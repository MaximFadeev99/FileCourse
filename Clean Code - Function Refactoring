using Microsoft.SqlServer.Server;
using System;
using System.Data;
using System.IO;
using System.Reflection;

namespace FileCourse
{
    public class Presenter
    {
        private readonly DataBase _dataBase;
        private readonly IViewer _viewer;
        private readonly Model _model;

        public Presenter (IViewer viewer)
        {
            _viewer = viewer ?? throw new ArgumentNullException(nameof(viewer));
            _dataBase = new DataBase();
            _model = new Model();
        }

        public void StartVerification(string passportInput)
        {
            if (_model.ValidatePassportInput(passportInput, out string commandText, out string connectionString) == false)
            {
                _viewer.ShowMessage("Неверный формат серии или номера паспорта");
            }
            else 
            {
                DataTable dataTable = _dataBase.Create(commandText, connectionString);
                OperationCodes result = _model.FindBallotInTable(dataTable);
                _dataBase.CloseConnection();
                DrawResult(result, passportInput);
            }
        }

        private void DrawResult(OperationCodes result, string passportInput)
        {
            if (result == OperationCodes.AccessAllowed)
            {
                _viewer.ShowResult($"По паспорту «{passportInput}» доступ к бюллетеню на дистанционном электронном голосовании ПРЕДОСТАВЛЕН");
            }
            else if (result == OperationCodes.AccessDenied)
            {
                _viewer.ShowResult($"По паспорту «{passportInput}» доступ к бюллетеню на дистанционном электронном голосовании НЕ ПРЕДОСТАВЛЕН");
            }
            else if (result == OperationCodes.NotRegistered)
            {
                _viewer.ShowResult($"Паспорт «{passportInput}» в списке участников дистанционного голосования НЕ НАЙДЕН");
            }
            else if (result == OperationCodes.NotFound)
            {
                _viewer.ShowMessage("Файл db.sqlite не найден. Положите файл в папку вместе с exe.");
            }
        }
    }

    public class Viewer : IViewer
    {
        private Presenter _presenter;

        public Presenter Create() 
        {
            _presenter = new Presenter(this);
            return _presenter;
        }

        public void ShowMessage(string message)
        {
            MessageBox.Show(message);
        }

        public void ShowResult(string result)
        {
            textResult.Text = result;
        }

        public void OnButtonClick()
        {
            string rawData = passportTextbox.Text.Trim();

            if (rawData == "")
            {
                ShowMessage("Введите серию и номер паспорта");
            }
            else
            {
                rawData.Replace(" ", string.Empty);
                _presenter.StartVerification(rawData);
            }
        }
    }

    public class Model
    {
        private const int PassportNumbersCount = 10;

        public bool ValidatePassportInput(string passportInput, out string commandText, out string connectionString)
        {
            if (passportInput.Length < PassportNumbersCount)
            {
                commandText = string.Empty;
                connectionString = string.Empty;
                return false;             
            }
            else
            {                            
                commandText = string.Format("select * from passports where num='{0}' limit 1;", (object)Form1.ComputeSha256Hash(passportInput));
                connectionString = string.Format("Data Source=" + Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\db.sqlite");
                return true;
            }
        }

        public OperationCodes FindBallotInTable(DataTable dataTable) 
        {
            try
            {
                OperationCodes result;

                if (dataTable.Rows.Count > 0)
                {
                    if (Convert.ToBoolean(dataTable.Rows[0].ItemArray[1]))
                    {
                        result = OperationCodes.AccessAllowed;
                    }
                    else
                    {
                        result = OperationCodes.AccessDenied;
                    }
                }
                else
                {
                    result = OperationCodes.NotRegistered;
                }

                return result;
            }
            catch (SQLiteException ex)
            {
                if (ex.ErrorCode != 1)
                    throw new Exception();
                ;
                return OperationCodes.NotFound;
            }
        }
    }

    public class DataBase
    {
        SQLiteConnection _connection;

        public DataTable Create(string commandText, string connectionString)
        {
            _connection = new SQLiteConnection(connectionString);
            _connection.Open();
            SQLiteDataAdapter sqLiteDataAdapter = new SQLiteDataAdapter(new SQLiteCommand(commandText, _connection));
            DataTable dataTable1 = new DataTable();
            return dataTable1;
        }

        public void CloseConnection() => _connection.Close();
    }

    public enum OperationCodes
    {
        AccessAllowed,
        AccessDenied,
        NotRegistered,
        NotFound,
    }

    public interface IViewer 
    {
        Presenter Create();
        void ShowMessage(string message);
        void ShowResult(string result);
        void OnButtonClick();
    }
}
