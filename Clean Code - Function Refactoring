using Microsoft.SqlServer.Server;
using System;
using System.Data;
using System.IO;
using System.Reflection;

namespace FileCourse
{
    public class Presenter
    {
        private readonly DataBase _dataBase;
        private readonly IViewer _viewer;
        private readonly Model _model;

        public Presenter(IViewer viewer)
        {
            _viewer = viewer ?? throw new ArgumentNullException(nameof(viewer));
            _dataBase = new DataBase();
            _model = new Model();
        }

        public void AssessInput(string rawData) 
        {
            if (rawData == "")
            {
                _viewer.ShowMessage("Введите серию и номер паспорта");
            }
            else
            {
                rawData.Replace(" ", string.Empty);
                StartVerification(rawData);
            }
        }

        public void StartVerification(string passportInput)
        {
            if (_dataBase.ValidatePassportInput(passportInput) == false)
            {
                _viewer.ShowMessage("Неверный формат серии или номера паспорта");
            }
            else
            {
                string commandText = _dataBase.GenerateCommandText(passportInput, out string connectionString);
                DataTable dataTable = _dataBase.Create(commandText, connectionString);

                if (dataTable == null) 
                {
                    _viewer.ShowMessage("Файл db.sqlite не найден. Положите файл в папку вместе с exe.");
                    return;
                }

                string result = _model.FindBallotInTable(dataTable);              
                DrawResult(result, passportInput);
            }
        }

        private void DrawResult(string result, string passportInput)
        {
            if (result == Model.AccessAllowed)
            {
                _viewer.ShowResult($"По паспорту «{passportInput}» доступ к бюллетеню на дистанционном электронном голосовании ПРЕДОСТАВЛЕН");
            }
            else if (result == Model.AccessDenied)
            {
                _viewer.ShowResult($"По паспорту «{passportInput}» доступ к бюллетеню на дистанционном электронном голосовании НЕ ПРЕДОСТАВЛЕН");
            }
            else if (result == Model.NotRegistered)
            {
                _viewer.ShowResult($"Паспорт «{passportInput}» в списке участников дистанционного голосования НЕ НАЙДЕН");
            }
        }
    }

    public class Viewer : IViewer
    {
        private Presenter _presenter;

        public Viewer() =>
            _presenter = new Presenter(this);      

        public void ShowMessage(string message)
        {
            _messageBox.Show(message);
        }

        public void ShowResult(string result)
        {
            _textResult.Text = result;
        }

        public void OnButtonClick()
        {
            string rawData = _passportTextbox.Text.Trim();
            _presenter.AssessInput(rawData);
        }
    }

    public class Model
    {
        public static readonly string AccessAllowed = nameof(AccessAllowed);
        public static readonly string AccessDenied = nameof(AccessDenied);
        public static readonly string NotRegistered = nameof(NotRegistered);
       
        public string FindBallotInTable(DataTable dataTable)
        {
            string result;

            if (dataTable.Rows.Count > 0)
            {
                if (Convert.ToBoolean(dataTable.Rows[0].ItemArray[1]))
                {
                    result = AccessAllowed;
                }
                else
                {
                    result = AccessDenied;
                }
            }
            else
            {
                result = NotRegistered;
            }

            return result;
        }
    }

    public class DataBase
    {
        private const int PassportNumbersCount = 10;

        public bool ValidatePassportInput(string passportInput)
        {
            return passportInput.Length < PassportNumbersCount;                    
        }

        public string GenerateCommandText(string passportInput, out string connectionString) 
        {
            string commandText = string.Format("select * from passports where num='{0}' limit 1;", (object)Form1.ComputeSha256Hash(passportInput));
            connectionString = string.Format("Data Source=" + Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\db.sqlite");

            return commandText;
        }

        public DataTable Create(string commandText, string connectionString)
        {
            try
            {
                SQLiteConnection connection = new SQLiteConnection(connectionString);
                connection.Open();  
                SQLiteDataAdapter sqLiteDataAdapter = new SQLiteDataAdapter(new SQLiteCommand(commandText, _connection));
                DataTable dataTable1 = new DataTable();
                connection.Close();
                return dataTable1;
            }
            catch (SQLiteException ex) 
            {
                if (ex.ErrorCode != 1)
                    throw new Exception();

                return null;
            }
        }
    }

    public interface IViewer
    {
        void ShowMessage(string message);
        void ShowResult(string result);
    }
}
