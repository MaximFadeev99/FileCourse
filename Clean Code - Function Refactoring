using System;
using System.Data;
using System.IO;
using System.Reflection;

namespace FileCourse
{
    public class Presenter
    {
        private DataBase _dataBase;
        private Viewer _viewer;
        private Model _model;

        private void Initialize() 
        {
            _dataBase = new DataBase();
            _viewer = new Viewer(this);
            _model = new Model(_viewer, _dataBase);
        }

        public void StartVerification(string passportInput) => 
            _model.ValidatePassportInput(passportInput);
    }

    public class Viewer
    {
        private readonly Presenter _presenter;

        public Viewer (Presenter presenter) =>
            _presenter = presenter;

        public void ShowMessage(string message) 
        {
            MessageBox.Show(message);
        }

        public void ShowResult(string result) 
        {
            textResult.Text = result;
        }

        private void OnButtonClick() 
        {
            string rawData = passportTextbox.Text.Trim();

            if (rawData == "")
            {
                ShowMessage("Введите серию и номер паспорта");
            }
            else 
            {
                rawData.Replace(" ", string.Empty);
                _presenter.StartVerification(rawData);
            }       
        }
    }

    public class Model
    {
        private const int PassportNumbersCount = 10;

        private readonly Viewer _viewer;
        private readonly DataBase _dataBase;

        public Model(Viewer viewer, DataBase dataBase) 
        {
            _viewer = viewer;
            _dataBase = dataBase;
        }
        
        public void ValidatePassportInput(string passportInput) 
        {
            if (passportInput.Length < PassportNumbersCount) 
            {
                _viewer.ShowResult("Неверный формат серии или номера паспорта");
            }
            else
            {
                string commandText = string.Format("select * from passports where num='{0}' limit 1;", (object)Form1.ComputeSha256Hash(passportInput));
                string connectionString = string.Format("Data Source=" + Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\db.sqlite");
                OperationCodes result = (OperationCodes)_dataBase.SearchForBallot(commandText, connectionString);
                DrawResult(result, passportInput);
            }
        }

        private void DrawResult(OperationCodes result, string passportInput)
        {
            if (result == OperationCodes.AccessAllowed) 
            {
                _viewer.ShowResult($"По паспорту «{passportInput}» доступ к бюллетеню на дистанционном электронном голосовании ПРЕДОСТАВЛЕН");
            }
            else if (result == OperationCodes.AccessDenied)
            {
                _viewer.ShowResult($"По паспорту «{passportInput}» доступ к бюллетеню на дистанционном электронном голосовании НЕ ПРЕДОСТАВЛЕН");
            }
            else if (result == OperationCodes.NotRegistered)
            {
                _viewer.ShowResult($"Паспорт «{passportInput}» в списке участников дистанционного голосования НЕ НАЙДЕН");
            }
            else if (result == OperationCodes.NotFound)
            {
                _viewer.ShowMessage("Файл db.sqlite не найден. Положите файл в папку вместе с exe.");
            }
        }
    }

    public class DataBase 
    {
        public int SearchForBallot(string commandText, string connectionString) 
        {
            try
            {
                SQLiteConnection connection = new SQLiteConnection(connectionString);
                connection.Open();
                SQLiteDataAdapter sqLiteDataAdapter = new SQLiteDataAdapter(new SQLiteCommand(commandText, connection));
                DataTable dataTable1 = new DataTable();
                int result;

                if (dataTable1.Rows.Count > 0)
                {
                    if (Convert.ToBoolean(dataTable1.Rows[0].ItemArray[1]))
                    {
                        result = 0;
                    }
                    else
                    {
                        result = 1;
                    }
                }
                else 
                {
                    result = 2;
                }
                
                connection.Close();
                return result;
            }
            catch (SQLiteException ex)
            {
                if (ex.ErrorCode != 1)
                    throw new Exception();
;                
                return 3;
            }
        }  
    }

    public enum OperationCodes 
    {
        AccessAllowed,
        AccessDenied,
        NotRegistered,
        NotFound,
    }
}
