using System;
using System.Collections.Generic;
using System.Linq;

namespace FileCourse
{  
    public class Shop
    {
        private readonly Warehouse _warehouse;
        private readonly Cart _cart;

        public Shop(Warehouse warehouse)
        {
            _warehouse = warehouse;
            _cart = new Cart();
        }

        public void AddToCart(string goodName, int requiredQuantity)
        {
            Good requestedGood = _warehouse.Deliver(goodName, requiredQuantity, out int availableQuantity);

            if (requestedGood == null)
            {
                Console.WriteLine($"{goodName} can't be found!");
            }
            else if (requiredQuantity > availableQuantity)
            {
                Console.WriteLine($"The stock of {goodName} is insufficient. The good hasn't been added");
            }
            else
            {
                _cart.AddItem(requestedGood, requiredQuantity);
                Console.WriteLine($"{requiredQuantity} of {goodName} added");
            }
        }

        public void MakeOrder()
        {
            string paylink = GeneratePaylink();
            Dictionary<Good, int> purchasedGoods = _cart.GetAddedGoods(paylink);

            if (purchasedGoods != null)
                _warehouse.ReduceStock(purchasedGoods);
        }

        private string GeneratePaylink()
        {
            Random random = new Random();
            int orderCode = random.Next(int.MinValue, int.MaxValue);
            string fixedPart = "CustomerOrderNo";
            return fixedPart + orderCode;
        }

        public void ShowAvailablegoods() => _warehouse.ShowStoredGoods();
    }

    public class Cart
    {
        private Dictionary<Good, int> _addedGoods = new Dictionary<Good, int>();

        public void AddItem(Good good, int addedQuantity) =>
            _addedGoods.Add(good, addedQuantity);

        public void ShowAddedGoods()
        {
            foreach (var addedGood in _addedGoods)
                Console.WriteLine($"{addedGood.Key.Name} - {addedGood.Value} шт.");
        }

        public Dictionary<Good, int> GetAddedGoods(string paylink)
        {
            return TryConfirmPayment(paylink) ? _addedGoods : null;
        }

        private bool TryConfirmPayment(string paylink)
        {
            return true; //для упрощения платеж всегда подтверждается
        }
    }

    public class Warehouse
    {
        private Dictionary<Good, int> _storedGoods = new Dictionary<Good, int>();

        public Warehouse()
        {
            int IPhone12InitialCount = 20;
            int IPhone11InitialCount = 20;

            _storedGoods.Add(new Good(Goods.IPhone12), IPhone12InitialCount);
            _storedGoods.Add(new Good(Goods.IPhone11), IPhone11InitialCount);
        }

        public Good Deliver(string requestedGoodName, int requestedQuantity, out int deliveredQuantity)
        {
            Good deliveredGood = _storedGoods.FirstOrDefault
                (good => good.Key.Name == requestedGoodName).Key;

            if (deliveredGood != null)
            {
                if (_storedGoods[deliveredGood] >= requestedQuantity)
                {
                    deliveredQuantity = requestedQuantity;
                    return deliveredGood;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(nameof(requestedQuantity));
                }
            }
            else
            {
                throw new ArgumentNullException(nameof(requestedGoodName));
            }
        }

        public void ReduceStock(Dictionary<Good, int> removedGoods)
        {
            foreach (var good in removedGoods)
            {
                _storedGoods[good.Key] -= good.Value;

                if (_storedGoods[good.Key] == 0)
                    _storedGoods.Remove(good.Key);
            }
        }

        public void ShowStoredGoods()
        {
            foreach (var storedGood in _storedGoods)
                Console.WriteLine($"{storedGood.Key.Name} - {storedGood.Value} шт.");
        }
    }

    public class Good
    {
        public string Name { get; private set; }

        public Good(string name) => Name = name;
    }

    public static class Goods
    {
        public static readonly string IPhone12 = nameof(IPhone12);
        public static readonly string IPhone11 = nameof(IPhone11);
    }
}
