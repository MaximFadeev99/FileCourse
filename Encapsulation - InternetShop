using System;
using System.Collections.Generic;

namespace FileCourse
{
    class Program 
    {
        public void Main(string[] args) 
        {
            Good iPhone12 = new Good("IPhone 12");
            Good iPhone11 = new Good("IPhone 11");

            Warehouse warehouse = new Warehouse();

            Shop shop = new Shop(warehouse);

            warehouse.Delive(iPhone12, 10);
            warehouse.Delive(iPhone11, 1);

            warehouse.ShowStoredGoods(); //Вывод всех товаров на складе с их остатком

            Cart cart = shop.Cart(shop);
            cart.Add(iPhone12, 4);
            cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе

            cart.ShowAddedGoods(); //Вывод всех товаров в корзине

            Console.WriteLine(cart.Order().Paylink);

            cart.Add(iPhone12, 9); //Ошибка, после заказа со склада убираются заказанные товары
        }   
    }

    public class Shop
    {
        public Warehouse Warehouse { get; private set; }

        public Shop(Warehouse warehouse) =>  Warehouse = warehouse;

        public Cart Cart(Shop shop) 
        {
            Cart cart = new Cart(shop);
            return cart;
        }       
    }

    public class Cart
    {
        private Dictionary<Good, int> _addedGoods = new Dictionary<Good, int>();
        private readonly Shop _shop;

        public Cart(Shop shop) => _shop = shop;

        public void Add(Good good, int quantity)
        {
            if (good == null)
            {
                throw new ArgumentNullException(nameof(good));
            }
            else if (quantity < 1)
            {
                throw new ArgumentOutOfRangeException(nameof(quantity));
            }

            if (_shop.Warehouse.TryConfirmAvailability(good, quantity))
            {
                if (_addedGoods.ContainsKey(good))
                {
                    _addedGoods[good] += quantity;
                }
                else
                {
                    _addedGoods.Add(good, quantity);
                }
            }
            else 
            {
                throw new Exception($"Warehouse lacks the requested good {good}");                
            }            
        }

        public PayInfo Order() 
        {
            foreach (var good in _addedGoods) 
                _shop.Warehouse.ReduceStock(good);           

            PayInfo payInfo = new PayInfo(GeneratePaylink());
            return payInfo;
        }

        public void ShowAddedGoods()
        {
            foreach (var addedGood in _addedGoods)
                Console.WriteLine($"{addedGood.Key.Name} - {addedGood.Value} шт.");
        }

        private string GeneratePaylink()
        {
            Random random = new Random();
            int orderCode = random.Next(int.MinValue, int.MaxValue);
            string fixedPart = "CustomerOrderNo";
            return fixedPart + orderCode;
        }
    }

    public class Warehouse
    {
        private Dictionary<Good, int> _storedGoods = new Dictionary<Good, int>();

        public void Delive (Good good, int quantity)
        {
            if (good == null)
            {
                throw new ArgumentNullException(nameof(good));
            }
            else if (quantity < 1) 
            {
                throw new ArgumentOutOfRangeException(nameof(quantity));
            }

            if (_storedGoods.ContainsKey(good))
            {
                _storedGoods[good] += quantity;
            }
            else 
            {
                _storedGoods.Add(good, quantity);
            }
        }

        public bool TryConfirmAvailability(Good good, int quantity) 
        {
            return _storedGoods.ContainsKey(good) && _storedGoods[good] >= quantity? true : false;
        }

        public void ReduceStock(KeyValuePair<Good, int> removedGood)
        {
            _storedGoods[removedGood.Key] -= removedGood.Value;

            if (_storedGoods[removedGood.Key] == 0)
                _storedGoods.Remove(removedGood.Key);
        }

        public void ShowStoredGoods()
        {
            foreach (var storedGood in _storedGoods)
                Console.WriteLine($"{storedGood.Key.Name} - {storedGood.Value} шт.");
        }
    }

    public class PayInfo 
    {
        public string Paylink { get; private set; }

        public PayInfo(string paylink) => Paylink = paylink;
    }

    public class Good
    {
        public string Name { get; private set; }

        public Good(string name) => Name = name;
    }
}
