using System;
using System.Collections.Generic;

namespace FileCourse
{
    class Program
    {
        public static void Main(string[] args)
        {
            Good iPhone12 = new Good("IPhone 12");
            Good iPhone11 = new Good("IPhone 11");

            Warehouse warehouse = new Warehouse();

            Shop shop = new Shop(warehouse);

            warehouse.Delive(iPhone12, 10);
            warehouse.Delive(iPhone11, 1);

            warehouse.ShowStoredGoods(); //Вывод всех товаров на складе с их остатком

            Cart cart = shop.Cart(shop);
            cart.Add(iPhone12, 4);
            cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе

            cart.ShowAddedGoods(); //Вывод всех товаров в корзине

            Console.WriteLine(cart.Order().Paylink);

            cart.Add(iPhone12, 9); //Ошибка, после заказа со склада убираются заказанные товары
        }
    }

    public class Shop
    {
        public Shop(Warehouse warehouse) => Warehouse = warehouse;

        public Warehouse Warehouse { get; private set; }

        public Cart Cart(Shop shop)
        {
            Cart cart = new Cart(shop);
            return cart;
        }
    }

    public class Cart
    {
        private Dictionary<Good, int> _goods = new Dictionary<Good, int>();
        private readonly Shop _shop;

        public Cart(Shop shop) => _shop = shop;

        public void Add(Good good, int quantity)
        {
            if (good == null)
            {
                throw new ArgumentNullException(nameof(good));
            }
            else if (quantity < 1)
            {
                throw new ArgumentOutOfRangeException(nameof(quantity));
            }

            if (_shop.Warehouse.TryConfirmAvailability(good, quantity))
            {
                if (_goods.ContainsKey(good) == false)
                {
                    _goods[good] = quantity;
                }
                else 
                {
                    _goods[good] += quantity;
                }
            }
            else
            {
                throw new Exception($"Warehouse lacks the requested good {good}");
            }
        }

        public Order Order()
        {
            foreach (var good in _goods)
                _shop.Warehouse.ReduceStock(good);

            Order order = new Order(GeneratePaylink());
            return order;
        }

        public void ShowAddedGoods()
        {
            foreach (var addedGood in _goods)
                Console.WriteLine($"{addedGood.Key.Name} - {addedGood.Value} шт.");
        }

        private string GeneratePaylink()
        {
            Random random = new Random();
            int orderCode = random.Next(int.MinValue, int.MaxValue);
            string fixedPart = "CustomerOrderNo";
            return fixedPart + orderCode;
        }
    }

    public class Warehouse
    {
        private Dictionary<Good, int> _goods = new Dictionary<Good, int>();

        public void Delive(Good good, int quantity)
        {
            if (good == null)
            {
                throw new ArgumentNullException(nameof(good));
            }
            else if (quantity < 1)
            {
                throw new ArgumentOutOfRangeException(nameof(quantity));
            }

            if (_goods.ContainsKey(good))
            {
                _goods[good] += quantity;
            }
            else
            {
                _goods.Add(good, quantity);
            }
        }

        public bool TryConfirmAvailability(Good good, int quantity)
        {
            return _goods.ContainsKey(good) && _goods[good] >= quantity ? true : false;
        }

        public void ReduceStock(KeyValuePair<Good, int> removedGood)
        {
            _goods[removedGood.Key] -= removedGood.Value;

            if (_goods[removedGood.Key] == 0)
                _goods.Remove(removedGood.Key);
        }

        public void ShowStoredGoods()
        {
            foreach (var storedGood in _goods)
                Console.WriteLine($"{storedGood.Key.Name} - {storedGood.Value} шт.");
        }
    }

    public class Order
    {
        public Order(string paylink) => Paylink = paylink;
        
        public string Paylink { get; private set; }
    }

    public class Good
    {
        public Good(string name) => Name = name;
       
        public string Name { get; private set; }
    }
}
