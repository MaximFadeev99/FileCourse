using System;
using System.Collections.Generic;

namespace FileCourse
{
    class Program
    {
        public static void Main(string[] args)
        {
            Good iPhone12 = new Good("IPhone 12");
            Good iPhone11 = new Good("IPhone 11");

            Warehouse warehouse = new Warehouse();

            Shop shop = new Shop(warehouse);

            warehouse.Delive(iPhone12, 10);
            warehouse.Delive(iPhone11, 1);

            //Вывод всех товаров на складе с их остатком

            Cart cart = shop.Cart();
            cart.Add(iPhone12, 4);
            cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе

            //Вывод всех товаров в корзине

            Console.WriteLine(cart.Order().Paylink);

            cart.Add(iPhone12, 9); //Ошибка, после заказа со склада убираются заказанные товары
        }
    }

    public class Shop
    {
        private readonly Warehouse _warehouse;

        public Shop(Warehouse warehouse) =>
            _warehouse = warehouse;

        public Cart Cart() 
        {
            return new Cart(_warehouse);
        }           
    }

    public class Cart
    {
        private readonly Dictionary<Good, int> _goods = new Dictionary<Good, int>();
        private readonly IWarehouse _warehouse;

        public Cart(IWarehouse warehouse) =>
            _warehouse = warehouse;

        public void Add(Good good, int quantity)
        {
            if (good == null)
                throw new ArgumentNullException(nameof(good));

            if (quantity < 1)
                throw new ArgumentOutOfRangeException(nameof(quantity));

            if (_warehouse.TryConfirmAvailability(good, quantity) == false)
                throw new InvalidOperationException($"Warehouse lacks the requested good {good}");

            if (_goods.ContainsKey(good) == false)
                _goods[good] = 0;

            _goods[good] += quantity;
            ShowAddedGoods();
        }

        public Order Order()
        {
            foreach (var good in _goods)
                _warehouse.ReduceStock(good.Key, good.Value);

            return new Order(GeneratePaylink());
        }

        private void ShowAddedGoods()
        {
            foreach (var addedGood in _goods)
                Console.WriteLine($"{addedGood.Key.Name} - {addedGood.Value} шт.");
        }

        private string GeneratePaylink()
        {
            Random random = new Random();
            int orderCode = random.Next(int.MinValue, int.MaxValue);
            string fixedPart = "CustomerOrderNo";

            return fixedPart + orderCode;
        }
    }

    public class Warehouse : IWarehouse
    {
        private readonly Dictionary<Good, int> _goods = new Dictionary<Good, int>();

        public void Delive(Good good, int quantity)
        {
            if (good == null)
                throw new ArgumentNullException(nameof(good));

            if (quantity < 1)
                throw new ArgumentOutOfRangeException(nameof(quantity));

            if (_goods.ContainsKey(good) == false)
                _goods[good] = 0;

            _goods[good] += quantity;
            ShowStoredGoods();
        }

        public bool TryConfirmAvailability(Good good, int quantity)
        {
            return _goods.ContainsKey(good) && _goods[good] >= quantity;
        } 

        public void ReduceStock(Good good, int quantity)
        {
            _goods[good] -= quantity;

            if (_goods[good] == 0)
                _goods.Remove(good);
        }

        private void ShowStoredGoods()
        {
            foreach (var storedGood in _goods)
                Console.WriteLine($"{storedGood.Key.Name} - {storedGood.Value} шт.");
        }
    }

    public class Order
    {
        public Order(string paylink) =>
            Paylink = paylink;

        public string Paylink { get; }
    }

    public class Good
    {
        public Good(string name) =>
            Name = name;

        public string Name { get; }
    }

    public interface IWarehouse
    {
        bool TryConfirmAvailability(Good good, int quantity);
        void ReduceStock(Good good, int quantity);
    }
}
