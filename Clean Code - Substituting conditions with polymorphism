using System;
using System.Collections.Generic;
using System.Linq;

namespace FileCourse
{
    class Program
    {
        static void Main(string[] args)
        {
            PaymentSystemFactory factory = new PaymentSystemFactory();

            factory.Create<QiwiPaymentSystem>(); //переделал фабрику с дженериком после того, как отправил на проверку
            factory.Create<WebMoneyPaymentSystem>();
            factory.Create<CardPaymentSystem>();

            IReadOnlyList<PaymentSystem> paymentSystems = factory.GetAllSystems();
            PaymentHandler paymentHandler = new PaymentHandler(paymentSystems);
            OrderForm orderForm = new OrderForm(paymentSystems, paymentHandler);
        }
    }

    public class OrderForm
    {
        public OrderForm(IReadOnlyList<PaymentSystem> paymentSystems, PaymentHandler paymentHandler)
        {
            Button button;

            foreach (PaymentSystem paymentSystem in paymentSystems)
                button = new Button(paymentHandler, paymentSystem.Name, paymentSystem.SystemId);

            Console.WriteLine("Выберите способ платежа...");
        }
    }

    public class PaymentSystemFactory
    {
        private List<PaymentSystem> _createdPaymentSystems = new List<PaymentSystem>();

        public void Create<T>() where T : PaymentSystem
        {
            T genericInput = null;

            if (genericInput is QiwiPaymentSystem)
            {
                _createdPaymentSystems.Add(new QiwiPaymentSystem());
            }
            else if (genericInput is WebMoneyPaymentSystem)
            {
                _createdPaymentSystems.Add(new WebMoneyPaymentSystem());
            }
            else if (genericInput is CardPaymentSystem)
            {
                _createdPaymentSystems.Add(new CardPaymentSystem());
            }
            else
            {
                throw new ArgumentException(nameof(genericInput));
            }
        }

        public IReadOnlyList<PaymentSystem> GetAllSystems()
        {
            IReadOnlyList<PaymentSystem> paymentSystems = _createdPaymentSystems;
            return paymentSystems;
        }
    }

    public class PaymentHandler
    {
        private IReadOnlyList<PaymentSystem> _paymentSystems;

        public PaymentHandler(IReadOnlyList<PaymentSystem> paymentSystems) =>
            _paymentSystems = paymentSystems;

        public void TryPay(string systemId)
        {
            PaymentSystem chosenSystem = _paymentSystems.FirstOrDefault
                (paymentSystem => paymentSystem.SystemId == systemId);

            if (chosenSystem == null)
                throw new ArgumentNullException(nameof(systemId));

            chosenSystem.Pay();
        }
    }

    public class CardPaymentSystem : PaymentSystem
    {
        public CardPaymentSystem() : base("Card", "PS2") { }

        protected override void CallWebInterface()
        {
            Console.WriteLine($"Вызов API банка эмитера карты {Name}...");
            //симуляция веб интерфейса под Card
        }
    }

    public class WebMoneyPaymentSystem : PaymentSystem
    {
        public WebMoneyPaymentSystem() : base("WebMoney", "PS1") { }

        protected override void CallWebInterface()
        {
            Console.WriteLine($"Вызов API {Name}...");
            //симуляция веб интерфейса под WebMoney
        }
    }

    public class QiwiPaymentSystem : PaymentSystem
    {
        public QiwiPaymentSystem() : base("QIWI", "PS0") { }

        protected override void CallWebInterface()
        {
            Console.WriteLine($"Перевод на страницу {Name}...");
            //симуляция веб интерфейса под QIWI
        }
    }

    public abstract class PaymentSystem : IPaymentSystem
    {
        public PaymentSystem(string name, string systemId)
        {
            Name = name;
            SystemId = systemId;
        }

        public string Name { get; }
        public string SystemId { get; }

        public void Pay()
        {
            CallWebInterface();
            ShowPaymentResult();
        }

        protected abstract void CallWebInterface();

        private void ShowPaymentResult()
        {
            Console.WriteLine($"Вы оплатили с помощью {Name}");
            Console.WriteLine($"Проверка платежа через {Name}...");
            Console.WriteLine("Оплата прошла успешно!");
        }
    }

    public class Button
    {
        private PaymentHandler _paymentHandler;

        public Button(PaymentHandler paymentHandler, string systemId, string caption)
        {
            _paymentHandler = paymentHandler;
            _systemId = systemId;
            _caption = caption;
        }

        public string _systemId { get; }
        public string _caption { get; }

        public void OnButtonPressed()
        {
            _paymentHandler.TryPay(_systemId);
        }
    }

    public interface IPaymentSystem
    {
        void Pay();
    }
}
