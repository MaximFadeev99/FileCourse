using System;

namespace FileCourse
{
    class Program
    {
        static void Main(string[] args)
        {
            PaymentSystem1 paymentSystem1 = new PaymentSystem1("pay.system1.ru/order?amount=12000RUB&hash=");
            PaymentSystem2 paymentSystem2 = new PaymentSystem2("order.system2.ru/pay?hash=");
            PaymentSystem3 paymentSystem3 = new PaymentSystem3("system3.com/pay?amount=12000&curency=RUB&hash=");
            Order order = new Order(5, 3215);

            Console.WriteLine(paymentSystem1.GetPayingLink(order));
            Console.WriteLine(paymentSystem2.GetPayingLink(order));
            Console.WriteLine(paymentSystem3.GetPayingLink(order));
            Console.WriteLine(paymentSystem3.GetPayingLink(order));
            Console.ReadKey();
        }
    }

    public class PaymentSystem3 : PaymentSystem1
    {
        public PaymentSystem3(string fixedPart) : base(fixedPart) { }
    }

    public class PaymentSystem2 : PaymentSystem1
    {
        public PaymentSystem2(string fixedPart) : base(fixedPart) { }
    }

    public class PaymentSystem1 : IPaymentSystem
    {
        private string _fixedPart;

        public PaymentSystem1(string fixedPart)
        {
            _fixedPart = fixedPart;
        }

        public string GetPayingLink(Order order)
        {
            return _fixedPart + HashService.GenerateHash(this, order);
        }
    }

    public class Order
    {
        public Order(int id, int amount)
        {
            Id = id;
            Amount = amount;
        }

        public int Id { get; private set; }
        public int Amount { get; private set; }     
    }

    public static class HashService
    {
        private static string _secretCode;
        private static string _secretCodeFixedPart = "SecretCode";
        private static int _orderNumber = 1;

        public static string GenerateHash(IPaymentSystem iPaymentSystem, Order order) 
        {
            if (iPaymentSystem is PaymentSystem3)
            {
                GenerateSecretCode();
                return (order.Id.ToString() + order.Amount.ToString() + _secretCode);               
            }
            else if (iPaymentSystem is PaymentSystem2)
            {
                return (order.Id.ToString() + order.Amount.ToString());
            }
            else if (iPaymentSystem is PaymentSystem1)
            {
                return order.Id.ToString();
            }
            else 
            {
                throw new ArgumentOutOfRangeException(nameof(iPaymentSystem), "Unknown payment system");
            }
        }

        private static void GenerateSecretCode() 
        {
            _secretCode = _secretCodeFixedPart + _orderNumber++;
        }
    }

    public interface IPaymentSystem
    {
        string GetPayingLink(Order order);
    }
}
