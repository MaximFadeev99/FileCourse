using System;

namespace FileCourse
{
    class Program
    {
        static void Main(string[] args)
        {
            PaymentSystem1 paymentSystem1 = new PaymentSystem1
                ("pay.system1.ru/order?amount=12000RUB&hash=", new HashService());
            PaymentSystem2 paymentSystem2 = new PaymentSystem2
                ("order.system2.ru/pay?hash=", new HashService());
            PaymentSystem2 paymentSystem3 = new PaymentSystem2
                ("system3.com/pay?amount=12000&curency=RUB&hash=", new EncryptedHashService());
            Order order = new Order(5, 3215);

            Console.WriteLine(paymentSystem1.GetPayingLink(order));
            Console.WriteLine(paymentSystem2.GetPayingLink(order));
            Console.WriteLine(paymentSystem3.GetPayingLink(order));
            Console.WriteLine(paymentSystem3.GetPayingLink(order));
            Console.ReadKey();
        }
    }

    public class PaymentSystem2 : PaymentSystem1
    {
        public PaymentSystem2(string fixedPart, IHashService hashService) : 
            base(fixedPart, hashService) {}

        protected override string GenerateHashMessage(Order order)
        {
            return base.GenerateHashMessage(order) + order.Amount.ToString();
        }
    }

    public class PaymentSystem1 : IPaymentSystem
    {
        private readonly string _fixedPart;
        private readonly IHashService _hashService;

        public PaymentSystem1(string fixedPart, IHashService hashService)
        {
            _fixedPart = fixedPart;
            _hashService = hashService;
        }

        public string GetPayingLink(Order order)
        {
            string hashMessage = GenerateHashMessage(order);
            return _fixedPart + _hashService.GenerateHash(hashMessage);
        }

        protected virtual string GenerateHashMessage(Order order)
        {
            return order.Id.ToString();
        }
    }

    public class Order
    {
        public Order(int id, int amount)
        {
            Id = id;
            Amount = amount;
        }

        public int Id { get;}
        public int Amount { get;}
    }

    public class HashService : IHashService
    {
        public virtual string GenerateHash(string message)
        {
            string hash = message;

            // do whatever a hash service is supposed to do 

            return hash;
        }
    }

    public class EncryptedHashService : HashService
    {
        private const string SecretCodeFixedPart = "SecretCode";

        private static int _orderNumber = 1;

        public override string GenerateHash(string message)
        {
            string baseHash = base.GenerateHash(message);
            return baseHash + SecretCodeFixedPart + _orderNumber++;
        }
    }

    public interface IPaymentSystem
    {
        string GetPayingLink(Order order);
    }

    public interface IHashService
    {
        string GenerateHash(string message);
    }
}
